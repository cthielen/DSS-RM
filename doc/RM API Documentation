RM API Documentation
====================
Version 0.6
Updated 2013-03-21
Christopher Thielen (cmthielen@ucdavis.edu)

Notes
-----
This document assumes a working instance of RM is available at
http://localhost:3000/. Please substitute this address for the proper
one if need be.

Introduction and REST
---------------------
The API for Roles Management (RM) is based on RESTful JSON. REST differs
from other API mechanisms like SOAP in that it is typically resource-based,
not strongly-bound and not based around class definitions. The difference in
these approaches is simple to illustrate:

SOAP-style:
  API end-point: https://application.dev/soap/

  Function call:
    User u = getUser((int)userId) // encoded via XML

RESTful JSON:
  HTTP GET https://application.dev/user/userId
  (result is returned as JSON)

The RESTful design was created by the W3C around the same time as HTTP 1.1
and utilizes the full set of HTTP verbs: HTTP GET to get a resource,
HTTP DELETE to remove a resource, HTTP POST to create a new resource,
HTTP PUT to update an existing resource, etc.

Resource-Types
--------------
The available resources in this version of the API are:

  * people
    Represents an individual.
  * groups
    Represents a group.
  * entities
    Represents either a person or a group. Useful when
    you want to query both (e.g. sending messages).
  * roles
    Represents roles.
  * applications
    Represents applications.

Authentication
--------------
All API calls must be authenticated. This requires a valid API key. Request
an API key from the RM System Administrator. The API key consists of the name
of your application and a randomly generated string.

To authenticate, send this exact name and password using standard HTTP Auth
over SSL.

Nomenclature
------------
A few notes on language usage:

RM refers to 'entities' and 'members' when referencing those associated with
a role or application. The important difference in the terms is that 'entities'
refers to both groups and people whereas 'members' refers to people and group
members calculated together and flattened out. For example, if a role has
one person assigned and one group (containing two additional people) assigned,
'entities' will have two objects in it: the one person and the one group, while
'members' will have three people objects in it: the one person and the two
extracted from the group. Feel free to use whichever suits your needs.

Examples
--------
The following examples demonstrate the API using the popular CLI tool 'curl',
similar to 'wget'. The purpose of the tool is simply to make network requests.

1. Getting information about a person using their login ID (assumed to
   be "joe"):

  HTTP GET http://localhost:3000/api/people/joe

  curl --user "username:password" http://localhost:3000/api/people/cthielen.json
  
  {"id":13688,"name":"Christopher Thielen","type":"Person","loginid":"cthielen","role_ids":[1,2,31,22,21],"roles":[{"id":1,"token":"access","name":"Access","application_id":1},{"id":2,"token":"admin","name":"Administrative Rights","application_id":1},{"id":31,"token":"access","name":"Access","application_id":27},{"id":22,"token":"admin","name":"Administrate","application_id":21},{"id":21,"token":"access","name":"Access","application_id":21}]}
  

2. Getting information about an application (including its roles):

  (1 is the application ID)
  HTTP GET http://localhost:3000/api/applications/1.json

  curl --user "username:password" http://localhost:3000/api/applications/1.json
  
  {"id":1,"name":"DSS Roles Management","roles":[{"id":1,"token":"access","name":"Access","application_id":1,"description":"Allow access to this application","mandatory":null,"default":1,"entities":[{"type":"Person","id":110,"name":"Alan Lai"},{"type":"Person","id":13704,"name":"Carmina Caselli"},{"type":"Person","id":13689,"name":"Jeremy Phillips"},{"type":"Person","id":13688,"name":"Christopher Thielen"},{"type":"Person","id":13907,"name":"Obada Kadri"}],"ad_path":null},{"id":2,"token":"admin","name":"Administrative Rights","application_id":1,"description":"Administrative Rights","mandatory":null,"default":0,"entities":[{"type":"Person","id":13689,"name":"Jeremy Phillips"},{"type":"Person","id":13688,"name":"Christopher Thielen"}],"ad_path":null}],"description":"No description given","owners":[],"operators":[]}

3. Importing a person via LDAP into RM and getting their details

  HTTP POST http://localhost:3000/api/people/import/their_login_id.json

  curl --data "" -H "Accept: application/vnd.roles-management.v1" --user "Test":"1234" http://localhost:3000/api/people/import/their_login_id.json
