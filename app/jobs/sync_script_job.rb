require 'sync'
require 'base64' # temporarily needed until Ruby bug #10824 is fixed

# Runs a single sync script for a single user/role job.
# These jobs are generated by the sync subsystem found in lib/sync.rb.
# Do not create these jobs outside lib/sync.rb.
SyncScriptJob = Struct.new(:job_uuid, :sync_script, :sync_json) do
  # def enqueue(job)
  # end

  def perform
    # Call the script, piping the JSON
    ret = IO.popen(sync_script, 'r+', :err => [:child, :out]) do |pipe|
      pipe.puts Base64.decode64(sync_json)
      pipe.close_write
      pipe.gets(nil)
    end

    # e.g. "638aa9a4-4ef9-4a21-b223-28adfba578a1: active_directory.rb:"
    log_tag = "#{job_uuid}: #{sync_script.split(File::SEPARATOR)[-1]}:"

    if $?.exitstatus != 0
      Sync.logger.error "#{log_tag} ERROR"
      Sync.logger.error "#{log_tag} \t" + ret.gsub("\n", "\n#{log_tag} \t") if ret and ret.length > 0
      raise 'Sync script returned an error.'
    else
      Sync.logger.debug "#{log_tag} SUCCESS"
      Sync.logger.info "#{log_tag} \t" + ret.gsub("\n", "\n#{log_tag} \t") if ret and ret.length > 0
    end
  end

  # def before(job)
  # end

  # def after(job)
  # end

  # def success(job)
  # end

  # We don't need to care about error because we throw the error ourselves
  # in 'perform' if the external script fails.
  # def error(job, exception)
  # end

  def failure(job)
    # TODO: Make the failure e-mail delivery address configurable
    AdminMailer.sync_script_failed("dssit-devs@ucdavis.edu", job).deliver!
  end

  def reschedule_at(current_time, attempts)
    current_time + 30.seconds + (120.seconds * attempts)
  end

  def max_attempts
    10
  end

  def max_run_time
    28800 # 8 hours (in seconds)
  end
end
